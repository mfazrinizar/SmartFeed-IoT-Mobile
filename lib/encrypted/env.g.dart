// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    173,
    135,
    171,
    200,
    216,
    39,
    11,
    139,
    122,
    224,
    136,
    33,
    239,
    116,
    202,
    184,
    218,
    67,
    70,
    215,
    241,
    175,
    37,
    65,
    224,
    136,
    206,
    51,
    1,
    186,
    7,
    216,
    125,
    249,
    230,
    2,
    44,
    219,
    111,
    39,
    239,
    82,
    97,
    85,
    244,
    110,
    102,
    5,
    108,
    18,
    2,
    44,
    73,
    112,
    247,
    44,
    61,
    196,
    76,
    75,
    161,
    221,
    33,
    23,
    163,
    218,
    59,
    69,
    69,
    36,
    124,
    89,
    226,
    157,
    227,
    46,
    72,
    243,
    111,
    215,
    120,
    249,
    153,
    210,
    103,
    207,
    147,
    4,
    35,
    187,
    64,
    172,
    120,
    63,
    155,
    93,
    130,
    215,
    239,
    21,
    244,
    217,
    155,
    103,
    163,
    184,
    40,
    97,
    76,
    82,
    46,
    126,
    154,
    253,
    97,
    10,
    102,
    224,
    16,
    177,
    25,
    208,
    213,
    243,
    243,
    248,
    198,
    218,
    205,
    146,
    115,
    237,
    63,
    100,
    223,
    101,
    117,
    69,
    186,
    161,
    193,
    53,
    99,
    22,
    35,
    136,
    72,
    197,
    85,
    189,
    5,
    56,
    248,
    78,
    137,
    119,
    198,
    37,
    82,
    243,
    173,
    2,
    145,
    81,
    250,
    245,
    197,
    161,
    166,
    218,
    251,
    178,
    79,
    149,
    193,
    154,
    77,
    235,
    7,
    107,
    212,
    239,
    239,
    151,
    127,
    209,
    226,
    22,
    177,
    47,
    92,
    6,
    58,
    99,
    84,
    191,
    157,
    44,
    190,
    163,
    185,
    75,
    241,
    47,
    8,
    255,
    154,
    164,
    245,
    204,
    11,
    172,
    96,
    242,
    148,
    117,
    198,
    10,
    9,
    129,
    89,
    95,
    225,
    27,
    68,
    63,
    206,
    80,
    13,
    142,
    92,
    42,
    47,
    18,
    237,
    52,
    195,
    234,
    174,
    195,
    56,
    146,
    153,
    71,
    141,
    232,
    26,
    16,
    51,
    50,
    144,
    72,
    61,
    96,
    181,
    49,
    183,
    27,
    193,
    175,
    76,
    134,
    170,
    207,
    202,
    87,
    205,
    34,
    111,
    53,
    63,
    102,
    32,
    145,
    14,
    240,
    84,
    40,
    170,
    53,
    41,
    192,
    234,
    142,
    153,
    129,
    155,
    211,
    101,
    225,
    29,
    2,
    54,
    154,
    166,
    144,
    28,
    172,
    161,
    98,
    189,
    70,
    228,
    238,
    74,
    197,
    94,
    221,
    212,
    123,
    160,
    88,
    109,
    8,
    35,
    178,
    133,
    99,
    25,
    53,
    53,
    130,
    49,
    119,
    63,
    176,
    126,
    212,
    16,
    106,
    109,
    29,
    204,
    145,
    103,
    50,
    212,
    174,
    194,
    164,
    210,
    255,
    140,
    20,
    38,
    36,
    116,
    157,
    47,
    218,
    57,
    140,
    29,
    144,
    85,
    169,
    244,
    30,
    79,
    182,
    241,
    179,
    174,
    36,
    47,
    225,
    44,
    4,
    213,
    164,
    166,
    2,
    176,
    245,
    170,
    88,
    181,
    216,
    213,
    193,
    71,
    143,
    228,
    89,
    112,
    49,
    217,
    81,
    57,
    87,
    109,
    50,
    202,
    105,
    101,
    174,
    154,
    175,
    132,
    152,
    211,
    241,
    109,
    17,
    135,
    150,
    97,
    151,
    103,
    115,
    50,
    183,
    152,
    60,
    65,
    143,
    113,
    235,
    34,
    183,
    29,
    128,
    93,
    85,
    224,
    10,
    217,
    231,
    121,
    136,
    114,
    196,
    93,
    253,
    194,
    133,
    229,
    218,
    14,
    108,
    70,
    189,
    196,
    143,
    31,
    13,
    248,
    110,
    195,
    31,
    171,
    175,
    174,
    144,
    42,
    48,
    123,
    171,
    97,
    147,
    227,
    200,
    52,
    143,
    214,
    122,
    157,
    64,
    131,
    81,
    89,
    181,
    20,
    211,
    125,
    8,
    138,
    242,
    10,
    80,
    86,
    69,
    82,
    164,
    68,
    34,
    206,
    144,
    196,
    102,
    238,
    126,
    102,
    100,
    59,
    128,
    120,
    155,
    202,
    70,
    202,
    246,
    45,
    250,
    251,
    86,
    139,
    193,
    224,
    122,
    51,
    178,
    43,
    157,
    19,
    156,
    222,
    163,
    58,
    52,
    107,
    123,
    89,
    120,
    92,
    193,
    86,
    244,
    137,
    117,
    238,
    64,
    218,
    92,
    141,
    84,
    58,
    58,
    62,
    254,
    146,
    4,
    229,
    119,
    128,
    145,
    85,
    34,
    112,
    227,
    227,
    228,
    101,
    209,
    198,
    157,
    22,
    221,
    54,
    164,
    177,
    161,
    90,
    141,
    178,
    94,
    216,
    114,
    79,
    210,
    62,
    187,
    47,
    11,
    203,
    163,
    124,
    69,
    74,
    70,
    168,
    196,
    177,
    150,
    202,
    121,
    43,
    137,
    198,
    252,
    200,
    169,
    242,
    239,
    157,
    180,
    172,
    109,
    223,
    48,
    89,
    247,
    107,
    94,
    131,
    188,
    41,
    217,
    100,
    86,
    186,
    172,
    139,
    24,
    240,
    183,
    237,
    139,
    132,
    38,
    93,
    8,
    216,
    130,
    227,
    67,
    211,
    80,
    50,
    158,
    103,
    166,
    52,
    98,
    66,
    230,
    196,
    193,
    10,
    208,
    49,
    61,
    226,
    23,
    248,
    231,
    236,
    15,
    47,
    59,
    27,
    237,
    158,
    20,
    39,
    217,
    51,
    142,
    109,
    156,
    165,
    6,
    234,
    122,
    37,
    223,
    120,
    97,
    81,
    242,
    6,
    175,
    87,
    102,
    141,
    199,
    202,
    206,
    189,
    116,
    19,
    181,
    4,
    150,
    219,
    39,
    133,
    160,
    88,
    113,
    79,
    1,
    215,
    142,
    47,
    82,
    241,
    1,
    4,
    20,
    86,
    1,
    28,
    21,
    32,
    26,
    71,
    58,
    9,
    57,
    249,
    198,
    2,
    59,
    37,
    153,
    244,
    174,
    13,
    231,
    66,
    229,
    235,
    188,
    164,
    198,
    148,
    174,
    198,
    162,
    13,
    118,
    14,
    170,
    96,
    130,
    225,
    34,
    6,
    104,
    64,
    15,
    189,
    187,
    182,
    78,
    88,
    216,
    59,
    152,
    37,
    109,
    38,
    40,
    247,
    150,
    48,
    116,
    83,
    18,
    163,
    199,
    202,
    206,
    237,
    198,
    169,
    96,
    8,
    64,
    212,
    121,
    42,
    231,
    176,
    218,
    67,
    247,
    86,
    50,
    89,
    189,
    239,
    39,
    106,
    24,
    161,
    100,
    191,
    6,
    117,
    206,
    200,
    97,
    243,
    142,
    22,
    205,
    77,
    168,
    210,
    15,
    235,
    177,
    187,
    222,
    122,
    236,
    63,
    106,
    94,
    142,
    247,
    48,
    50,
    14,
    79,
    158,
    146,
    144,
    7,
    165,
    242,
    215,
    187,
    82,
    242,
    184,
    102,
    38,
    67,
    109,
    103,
    132,
    32,
    100,
    134,
    90,
    175,
    130,
    152,
    26,
    208,
    241,
    159,
    140,
    12,
    53,
    147,
    132,
    137,
    47,
    218,
    104,
    152,
    34,
    87,
    93,
    1,
    216,
    46,
    102,
    142,
    250,
    112,
    103,
    39,
    32,
    221,
    191,
    104,
    61,
    94,
    96,
    87,
    211,
    10,
    207,
    117,
    189
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  @override
  String get firebaseIosApiKey => _get('FIREBASE_IOS_API_KEY');

  @override
  String get firebaseIosAppId => _get('FIREBASE_IOS_APP_ID');

  @override
  String get firebaseIosMessagingSenderId =>
      _get('FIREBASE_IOS_MESSAGING_SENDER_ID');

  @override
  String get firebaseIosProjectId => _get('FIREBASE_IOS_PROJECT_ID');

  @override
  String get firebaseIosStorageBucket => _get('FIREBASE_IOS_STORAGE_BUCKET');

  @override
  String get firebaseIosBundleId => _get('FIREBASE_IOS_BUNDLE_ID');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
